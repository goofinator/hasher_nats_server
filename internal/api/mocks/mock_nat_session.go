// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/goofinator/hasher_nats_server/internal/api (interfaces: NatsSession)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/goofinator/hasher_nats_server/internal/api"
)

// MockNatsSession is a mock of NatsSession interface
type MockNatsSession struct {
	ctrl     *gomock.Controller
	recorder *MockNatsSessionMockRecorder
}

// MockNatsSessionMockRecorder is the mock recorder for MockNatsSession
type MockNatsSessionMockRecorder struct {
	mock *MockNatsSession
}

// NewMockNatsSession creates a new mock instance
func NewMockNatsSession(ctrl *gomock.Controller) *MockNatsSession {
	mock := &MockNatsSession{ctrl: ctrl}
	mock.recorder = &MockNatsSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNatsSession) EXPECT() *MockNatsSessionMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockNatsSession) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockNatsSessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNatsSession)(nil).Close))
}

// DataSource mocks base method
func (m *MockNatsSession) DataSource() <-chan *api.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataSource")
	ret0, _ := ret[0].(<-chan *api.Message)
	return ret0
}

// DataSource indicates an expected call of DataSource
func (mr *MockNatsSessionMockRecorder) DataSource() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataSource", reflect.TypeOf((*MockNatsSession)(nil).DataSource))
}

// SendMessage mocks base method
func (m *MockNatsSession) SendMessage(arg0 string, arg1 *api.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockNatsSessionMockRecorder) SendMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockNatsSession)(nil).SendMessage), arg0, arg1)
}
